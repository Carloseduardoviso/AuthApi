name: Build, Verify Dependencies and Dockerize

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Fazer checkout do repositório
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Instalar dependências (dotnet restore)
    - name: Set up .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'  # Define a versão do .NET Core usada

    # 3. Restaurar pacotes
    - name: Restore project dependencies
      run: dotnet restore ./AuthApi/AuthApi.sln

    # 4. Compilar o projeto
    - name: Build project
      run: dotnet build ./AuthApi/AuthApi.sln -c Release

    # 5. Executar testes
    - name: Run tests
      run: dotnet test ./AuthApi/AuthApi.sln --verbosity normal

    # 6. Configurar o Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 7. Fazer login no Docker Hub usando variáveis de ambiente
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}   # Usando o segredo DOCKER_USERNAME
        password: ${{ secrets.DOCKER_PASSWORD }}   # Usando o segredo DOCKER_PASSWORD

    # 8. Build da imagem Docker e push para o Docker Hub
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile   # Especifica o caminho do Dockerfile
        tags: ${{ secrets.DOCKER_USERNAME }}/gerenciamentoapis:latest   # Usando o segredo DOCKER_USERNAME para definir a imagem
        push: true  # Faz o push para o Docker Hub

    # 9. Executar a imagem Docker para build e testes (opcional)
    - name: Run Docker container
      run: |
        docker run ${{ secrets.DOCKER_USERNAME }}/gerenciamentoapis:latest
